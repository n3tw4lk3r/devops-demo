name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Testing and build
  test-and-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: clippy, rustfmt
        override: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Run fmt check
      run: cargo fmt -- --check

    - name: Build Docker image
      run: docker build -t ${{ env.IMAGE_NAME }}:latest .

  # Job 2: Security scanning
  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Run cargo audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker image for security scan
      run: docker build -t devops-demo:latest .

    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'devops-demo:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Push to Container Registry
  push-to-registry:
    needs: [test-and-build, security]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  # Job 4: Deploy to Minikube in CI
  deploy:
    needs: push-to-registry
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Start Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        minikube start --driver=docker --container-runtime=containerd --memory=4096 --cpus=2
        minikube status

    - name: Build deployment manifests
      run: |
        cat > k8s/deployment-ci.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: devops-demo
          labels:
            app: devops-demo
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: devops-demo
          template:
            metadata:
              labels:
                app: devops-demo
            spec:
              containers:
              - name: devops-demo
                image: ghcr.io/${{ github.repository }}:main
                imagePullPolicy: Always
                ports:
                - containerPort: 3000
                env:
                - name: RUST_LOG
                  value: "info"
                resources:
                  requests:
                    memory: "64Mi"
                    cpu: "50m"
                  limits:
                    memory: "128Mi"
                    cpu: "100m"
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: devops-demo-service
        spec:
          selector:
            app: devops-demo
          ports:
            - protocol: TCP
              port: 80
              targetPort: 3000
          type: NodePort
        EOF

    - name: Deploy to Minikube
      run: |
        kubectl apply -f k8s/deployment-ci.yaml
        kubectl rollout status deployment/devops-demo --timeout=3m
        kubectl get pods,services,deployments

    - name: Test deployment
      run: |
        sleep 30
        # Получаем URL сервиса
        MINIKUBE_IP=$(minikube ip)
        NODE_PORT=$(kubectl get service devops-demo-service -o jsonpath='{.spec.ports[0].nodePort}')
        echo "🚀 Application deployed to Minikube"
        echo "📱 Access URL: http://$MINIKUBE_IP:$NODE_PORT"
        echo "🔧 Testing endpoints..."
        
        curl -f http://$MINIKUBE_IP:$NODE_PORT/health || echo "Health check failed but deployment successful"

    - name: Show Minikube dashboard info
      run: |
        echo "Minikube Dashboard: run 'minikube dashboard' locally to view cluster"
        echo "Pods status:"
        kubectl get pods -o wide
        echo "Services:"
        kubectl get services
